"use client";

import { useState, useEffect, useMemo } from "react";
import { useCallData } from "@/context/CallDataContext";
import { useAppContext } from "@/context/AppContext";

/**
 * Hook principal pour g√©rer l'√©tat et la logique du composant Postit
 * @returns Objet contenant l'√©tat et les fonctions pour g√©rer le composant Postit
 */
export function usePostit() {
  // Hooks de contexte
  const {
    idCallActivite,
    selectedPostit, // ‚Üê CHANG√â de contexte
    setSelectedPostit, // ‚Üê CHANG√â de contexte
  } = useCallData();

  // √âtats locaux
  const [showTabs, setShowTabs] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [readyToDisplayGrids, setReadyToDisplayGrids] = useState(false);
  const [activeStep, setActiveStep] = useState(0);

  console.log("isCompleted", isCompleted);

  // √âtat pour suivre si un changement a √©t√© effectu√© dans une √©tape
  const [stepChanges, setStepChanges] = useState({
    0: false, // √âtape contexte
    1: false, // √âtape sujet
    2: false, // √âtape pratique
    3: false, // √âtape synth√®se (nouvelle)
  });

  // Initialisation de l'affichage des grilles
  useEffect(() => {
    const timeout = setTimeout(() => setReadyToDisplayGrids(true), 0);
    return () => clearTimeout(timeout);
  }, []);

  // Gestion de l'√©tat du postit et des √©tapes
  useEffect(() => {
    if (selectedPostit) {
      // D√©terminer si le postit a un sujet r√©el
      const hasRealSubject =
        selectedPostit.idsujet !== null && selectedPostit.idsujet !== undefined;

      // D√©terminer si le postit a une pratique r√©elle (utiliser idpratique comme r√©f√©rence principale)
      const hasRealPractice =
        selectedPostit.idpratique !== null &&
        selectedPostit.idpratique !== undefined &&
        selectedPostit.idpratique > 0; // Supposant que les IDs valides sont > 0

      // D√©terminer si le postit est complet
      const isFullyAssigned = hasRealSubject && hasRealPractice;
      setIsCompleted(isFullyAssigned);

      // D√©terminer l'√©tape initiale en fonction des assignations r√©elles
      let initialStep = 0;

      if (hasRealPractice && hasRealSubject) {
        initialStep = 3; // Si complet, afficher la synth√®se (√©tape 3) au lieu de l'√©tape 2
      } else if (hasRealSubject) {
        initialStep = 2; // Sujet assign√© mais pas de pratique -> aller √† l'√©tape pratique
      } else {
        initialStep = 0; // Rien n'est assign√© -> d√©marrer √† l'√©tape contexte
      }

      // V√©rifier si une √©tape initiale est sp√©cifi√©e dans le postit (pour le TimeLineAudio)
      if (selectedPostit.initialStep !== undefined) {
        initialStep = selectedPostit.initialStep;
      }

      // Appliquer l'√©tape initiale
      setActiveStep(initialStep);

      // R√©initialiser l'√©tat des changements entre postits
      setStepChanges({
        0: false,
        1: false,
        2: false,
        3: false,
      });
    }
  }, [selectedPostit?.id]); // Seulement quand l'ID change = nouveau postit

  // Navigation entre les √©tapes
  const handleNext = () => {
    if (activeStep === 1 && !selectedPostit?.idsujet) {
      alert("Veuillez s√©lectionner un sujet avant de continuer.");
      return;
    }

    // Marquer cette √©tape comme ayant √©t√© visit√©e/modifi√©e
    setStepChanges((prev) => ({
      ...prev,
      [activeStep]: true,
    }));

    // Si nous sommes √† l'√©tape 2 et que le postit est compl√©t√©, passer √† l'√©tape synth√®se
    if (activeStep === 2 && isCompleted) {
      setActiveStep(3); // Aller directement √† la synth√®se
    } else {
      setActiveStep((prevStep) => prevStep + 1);
    }
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  /**
   * Navigation directe vers une √©tape sp√©cifique
   * @param step Num√©ro de l'√©tape vers laquelle naviguer
   * @param skipAccessCheck Option pour ignorer la v√©rification d'accessibilit√© (pour les modifications directes)
   */
  const navigateToStep = (step, skipAccessCheck = false) => {
    if (skipAccessCheck || canAccessStep(step)) {
      setActiveStep(step);
    }
  };

  /**
   * V√©rifie si une √©tape est accessible en fonction de l'√©tat actuel
   * @param step Num√©ro de l'√©tape √† v√©rifier
   * @returns Bool√©en indiquant si l'√©tape est accessible
   */
  const canAccessStep = (step) => {
    // √âtape 0 (contexte) : toujours accessible
    if (step === 0) return true;

    // √âtape 1 (sujet) : accessible apr√®s avoir vu l'√©tape 0
    if (step === 1)
      return (
        stepChanges[0] ||
        (selectedPostit?.idsujet !== null &&
          selectedPostit?.idsujet !== undefined)
      );

    // √âtape 2 (pratique) : accessible uniquement si un sujet est s√©lectionn√©
    if (step === 2)
      return (
        selectedPostit?.idsujet !== null &&
        selectedPostit?.idsujet !== undefined
      );

    // √âtape 3 (synth√®se) : accessible uniquement si le postit est compl√©t√©
    if (step === 3) return isCompleted;

    return false;
  };

  // V√©rification si le sujet est r√©el
  const hasRealSubject =
    selectedPostit &&
    selectedPostit.idsujet !== null &&
    selectedPostit.idsujet !== undefined;

  // V√©rification si la pratique est r√©elle (utiliser idpratique comme r√©f√©rence principale)
  const hasRealPractice =
    selectedPostit &&
    selectedPostit.idpratique !== null &&
    selectedPostit.idpratique !== undefined &&
    selectedPostit.idpratique > 0; // Supposant que les IDs valides sont > 0

  // Liste des √©tapes avec leur √©tat d'accessibilit√© et de compl√©tion
  const steps = useMemo(
    () => [
      {
        id: 0,
        label: "Contexte du passage",
        icon: "üü¢",
        isAccessible: canAccessStep(0),
        isCompleted: stepChanges[0] || activeStep > 0,
        additionalInfo: selectedPostit?.text ? "Commentaire ajout√©" : null,
      },
      {
        id: 1,
        label: "Crit√®re qualit√© en d√©faut",
        icon: "üß≠",
        isAccessible: canAccessStep(1),
        isCompleted: hasRealSubject,
        additionalInfo: selectedPostit?.sujet || null,
      },
      {
        id: 2,
        label: "Pratique d'am√©lioration",
        icon: "üõ†Ô∏è",
        isAccessible: canAccessStep(2),
        isCompleted: hasRealPractice,
        additionalInfo: hasRealPractice ? selectedPostit?.pratique : null,
      },
      {
        id: 3,
        label: "Synth√®se",
        icon: "‚úì",
        isAccessible: canAccessStep(3),
        isCompleted: isCompleted,
        additionalInfo: null,
      },
    ],
    [
      activeStep,
      stepChanges,
      hasRealSubject,
      hasRealPractice,
      isCompleted,
      selectedPostit,
    ]
  );

  return {
    selectedPostit,
    idCallActivite,
    showTabs,
    setShowTabs,
    isCompleted,
    readyToDisplayGrids,
    activeStep,
    setActiveStep,
    steps,
    hasRealSubject,
    hasRealPractice,
    handleNext,
    handleBack,
    navigateToStep,
    canAccessStep,
    stepChanges,
  };
}
