"use client";

import { useState, useEffect, useMemo } from "react";
import { useCallData } from "@/context/CallDataContext";
import { useAppContext } from "@/context/AppContext";

// ‚úÖ Import des types autonomes
import { PostitExtended, NavigationStep } from "../types";

/**
 * Hook principal pour g√©rer l'√©tat et la logique du composant Postit
 * @returns Objet contenant l'√©tat et les fonctions pour g√©rer le composant Postit
 */
export function usePostit() {
  // Hooks de contexte
  const {
    idCallActivite,
    selectedPostit, // ‚Üê Sera cast√© vers PostitExtended
    setSelectedPostit,
  } = useCallData();

  // ‚úÖ Cast vers PostitExtended (type autonome)
  const extendedPostit = selectedPostit as PostitExtended;

  // √âtats locaux
  const [showTabs, setShowTabs] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [readyToDisplayGrids, setReadyToDisplayGrids] = useState(false);
  const [activeStep, setActiveStep] = useState(0);

  console.log("isCompleted", isCompleted);

  // √âtat pour suivre si un changement a √©t√© effectu√© dans une √©tape
  const [stepChanges, setStepChanges] = useState({
    0: false, // √âtape contexte
    1: false, // √âtape sujet
    2: false, // √âtape pratique
    3: false, // √âtape synth√®se
  });

  // Initialisation de l'affichage des grilles
  useEffect(() => {
    const timeout = setTimeout(() => setReadyToDisplayGrids(true), 0);
    return () => clearTimeout(timeout);
  }, []);

  // Gestion de l'√©tat du postit et des √©tapes
  useEffect(() => {
    if (extendedPostit) {
      // D√©terminer si le postit a un sujet r√©el
      const hasRealSubject =
        extendedPostit.idsujet !== null && extendedPostit.idsujet !== undefined;

      // ‚úÖ V√©rification de pratique via idpratique (si disponible) ou pratique
      const hasRealPractice = extendedPostit.idpratique
        ? extendedPostit.idpratique !== null &&
          extendedPostit.idpratique !== undefined &&
          extendedPostit.idpratique > 0
        : extendedPostit.pratique !== null &&
          extendedPostit.pratique !== undefined &&
          extendedPostit.pratique.trim() !== "";

      // D√©terminer si le postit est complet
      const isFullyAssigned = hasRealSubject && hasRealPractice;
      setIsCompleted(isFullyAssigned);

      // D√©terminer l'√©tape initiale en fonction des assignations r√©elles
      let initialStep = 0;

      if (hasRealPractice && hasRealSubject) {
        initialStep = 3;
      } else if (hasRealSubject) {
        initialStep = 2;
      } else {
        initialStep = 0;
      }

      // ‚úÖ Utilise initialStep du type autonome
      if (extendedPostit.initialStep !== undefined) {
        initialStep = extendedPostit.initialStep;
      }

      // Appliquer l'√©tape initiale
      setActiveStep(initialStep);

      // R√©initialiser l'√©tat des changements entre postits
      setStepChanges({
        0: false,
        1: false,
        2: false,
        3: false,
      });
    }
  }, [extendedPostit?.id]);

  // Navigation entre les √©tapes
  const handleNext = () => {
    if (activeStep === 1 && !extendedPostit?.idsujet) {
      alert("Veuillez s√©lectionner un sujet avant de continuer.");
      return;
    }

    setStepChanges((prev) => ({
      ...prev,
      [activeStep]: true,
    }));

    if (activeStep === 2 && isCompleted) {
      setActiveStep(3);
    } else {
      setActiveStep((prevStep) => prevStep + 1);
    }
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  const navigateToStep = (step: number, skipAccessCheck = false) => {
    if (skipAccessCheck || canAccessStep(step)) {
      setActiveStep(step);
    }
  };

  const canAccessStep = (step: number): boolean => {
    if (step === 0) return true;

    if (step === 1)
      return (
        stepChanges[0] ||
        (extendedPostit?.idsujet !== null &&
          extendedPostit?.idsujet !== undefined)
      );

    if (step === 2)
      return (
        extendedPostit?.idsujet !== null &&
        extendedPostit?.idsujet !== undefined
      );

    if (step === 3) return isCompleted;

    return false;
  };

  // V√©rification si le sujet est r√©el
  const hasRealSubject =
    extendedPostit &&
    extendedPostit.idsujet !== null &&
    extendedPostit.idsujet !== undefined;

  // ‚úÖ V√©rification flexible de la pratique
  const hasRealPractice =
    extendedPostit &&
    (extendedPostit.idpratique
      ? extendedPostit.idpratique !== null &&
        extendedPostit.idpratique !== undefined &&
        extendedPostit.idpratique > 0
      : extendedPostit.pratique !== null &&
        extendedPostit.pratique !== undefined &&
        extendedPostit.pratique.trim() !== "");

  // ‚úÖ Liste des √©tapes typ√©e avec NavigationStep
  const steps: NavigationStep[] = useMemo(
    () => [
      {
        id: 0,
        label: "Contexte du passage",
        icon: "üü¢",
        description: "Ajouter du contexte au passage s√©lectionn√©",
        isAccessible: canAccessStep(0),
        isCompleted: stepChanges[0] || activeStep > 0,
        isOptional: false,
      },
      {
        id: 1,
        label: "Crit√®re qualit√© en d√©faut",
        icon: "üß≠",
        description: "S√©lectionner le crit√®re qualit√© concern√©",
        isAccessible: canAccessStep(1),
        isCompleted: hasRealSubject,
        isOptional: false,
      },
      {
        id: 2,
        label: "Pratique d'am√©lioration",
        icon: "üõ†Ô∏è",
        description: "Choisir la pratique recommand√©e",
        isAccessible: canAccessStep(2),
        isCompleted: hasRealPractice,
        isOptional: false,
      },
      {
        id: 3,
        label: "Synth√®se",
        icon: "‚úì",
        description: "R√©vision et validation des choix",
        isAccessible: canAccessStep(3),
        isCompleted: isCompleted,
        isOptional: false,
      },
    ],
    [
      activeStep,
      stepChanges,
      hasRealSubject,
      hasRealPractice,
      isCompleted,
      extendedPostit,
    ]
  );

  // ‚úÖ Fonction utilitaire pour mettre √† jour le postit avec conversion
  const updatePostit = (updates: Partial<PostitExtended>) => {
    if (extendedPostit) {
      const updatedPostit = { ...extendedPostit, ...updates };
      // Conversion vers le type attendu par le contexte si n√©cessaire
      setSelectedPostit(updatedPostit as any); // Cast temporaire pour compatibilit√©
    }
  };

  // ‚úÖ Fonction pour marquer une √©tape comme modifi√©e
  const markStepAsChanged = (stepIndex: number) => {
    setStepChanges((prev) => ({
      ...prev,
      [stepIndex]: true,
    }));
  };

  return {
    // √âtat du postit
    selectedPostit: extendedPostit,
    updatePostit,

    // √âtat de l'activit√©
    idCallActivite,

    // √âtat de l'UI
    showTabs,
    setShowTabs,
    isCompleted,
    readyToDisplayGrids,

    // Navigation
    activeStep,
    setActiveStep,
    steps,
    handleNext,
    handleBack,
    navigateToStep,
    canAccessStep,

    // √âtat des √©tapes
    stepChanges,
    markStepAsChanged,

    // Validations
    hasRealSubject,
    hasRealPractice,
  };
}
