// src/services/AudioCacheService.ts
import localforage from "localforage";

// Configuration de localforage pour le stockage audio
const audioCache = localforage.createInstance({
  name: "audioCache",
  storeName: "audioFiles",
  description: "Cache pour les fichiers audio",
});

// Cl√© pour le registre des m√©tadonn√©es audio
const AUDIO_REGISTRY_KEY = "audioRegistry";

// Interface pour les m√©tadonn√©es d'un fichier audio en cache
interface CachedAudioMetadata {
  callId: number;
  filepath: string;
  filename: string;
  size: number;
  cachedAt: number; // timestamp
  lastAccessed: number; // timestamp
}

// Service de cache audio
export const AudioCacheService = {
  /**
   * Enregistre un fichier audio dans le cache
   * @param callId Identifiant de l'appel
   * @param filepath Chemin du fichier sur le serveur
   * @param filename Nom du fichier
   * @param audioBlob Blob contenant les donn√©es audio
   */
  async cacheAudio(
    callId: number,
    filepath: string,
    filename: string,
    audioBlob: Blob
  ): Promise<boolean> {
    try {
      // Calculer la taille du fichier en Mo
      const sizeMB = audioBlob.size / (1024 * 1024);

      // V√©rifier l'espace disponible
      await this.ensureCacheSpace(sizeMB);

      // Enregistrer le blob
      const cacheKey = `audio_${callId}`;
      await audioCache.setItem(cacheKey, audioBlob);

      // Mettre √† jour le registre des fichiers
      await this.updateRegistry(callId, filepath, filename, audioBlob.size);

      console.log(
        `‚úÖ Audio mis en cache: ${filename} (${sizeMB.toFixed(2)} Mo)`
      );
      return true;
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise en cache audio:", error);
      return false;
    }
  },

  /**
   * R√©cup√®re un fichier audio depuis le cache
   * @param callId Identifiant de l'appel
   * @returns URL objet pour le fichier audio ou null si non trouv√©
   */
  async getAudio(callId: number): Promise<string | null> {
    try {
      const cacheKey = `audio_${callId}`;
      const audioBlob = await audioCache.getItem<Blob>(cacheKey);

      if (!audioBlob) {
        return null;
      }

      // Mettre √† jour le timestamp de dernier acc√®s
      await this.updateLastAccessed(callId);

      // Cr√©er une URL d'objet √† partir du blob
      return URL.createObjectURL(audioBlob);
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la r√©cup√©ration audio depuis le cache:",
        error
      );
      return null;
    }
  },

  /**
   * V√©rifie si un fichier audio est en cache
   * @param callId Identifiant de l'appel
   * @returns true si l'audio est en cache
   */
  async isAudioCached(callId: number): Promise<boolean> {
    const cacheKey = `audio_${callId}`;
    return (await audioCache.getItem(cacheKey)) !== null;
  },

  /**
   * Met √† jour le registre des fichiers audio en cache
   */
  async updateRegistry(
    callId: number,
    filepath: string,
    filename: string,
    size: number
  ): Promise<void> {
    // R√©cup√©rer le registre existant
    const registry = await this.getRegistry();

    // Mettre √† jour l'entr√©e pour ce fichier
    registry[callId] = {
      callId,
      filepath,
      filename,
      size,
      cachedAt: Date.now(),
      lastAccessed: Date.now(),
    };

    // Sauvegarder le registre mis √† jour
    await localforage.setItem(AUDIO_REGISTRY_KEY, registry);
  },

  /**
   * Met √† jour le timestamp de dernier acc√®s pour un fichier audio
   */
  async updateLastAccessed(callId: number): Promise<void> {
    const registry = await this.getRegistry();

    if (registry[callId]) {
      registry[callId].lastAccessed = Date.now();
      await localforage.setItem(AUDIO_REGISTRY_KEY, registry);
    }
  },

  /**
   * R√©cup√®re le registre des fichiers audio en cache
   */
  async getRegistry(): Promise<Record<number, CachedAudioMetadata>> {
    const registry = await localforage.getItem<
      Record<number, CachedAudioMetadata>
    >(AUDIO_REGISTRY_KEY);
    return registry || {};
  },

  /**
   * S'assure qu'il y a assez d'espace dans le cache pour un nouveau fichier
   * en supprimant les fichiers les moins r√©cemment utilis√©s si n√©cessaire
   */
  async ensureCacheSpace(newFileSizeMB: number): Promise<void> {
    // Taille maximale du cache en Mo (50 Mo par d√©faut)
    const MAX_CACHE_SIZE_MB = 50;

    // R√©cup√©rer le registre
    const registry = await this.getRegistry();

    // Calculer la taille actuelle du cache
    let currentCacheSize = 0;
    Object.values(registry).forEach(
      (metadata) => (currentCacheSize += metadata.size / (1024 * 1024))
    );

    // Si l'ajout du nouveau fichier d√©passerait la limite, supprimer des fichiers
    if (currentCacheSize + newFileSizeMB > MAX_CACHE_SIZE_MB) {
      // Trier les fichiers par date de dernier acc√®s (du plus ancien au plus r√©cent)
      const sortedFiles = Object.values(registry).sort(
        (a, b) => a.lastAccessed - b.lastAccessed
      );

      // Supprimer les fichiers jusqu'√† avoir assez d'espace
      for (const file of sortedFiles) {
        if (currentCacheSize + newFileSizeMB <= MAX_CACHE_SIZE_MB) {
          break;
        }

        // Supprimer le fichier du cache
        await audioCache.removeItem(`audio_${file.callId}`);
        delete registry[file.callId];

        // Mettre √† jour la taille du cache
        currentCacheSize -= file.size / (1024 * 1024);

        console.log(`üóëÔ∏è Fichier audio supprim√© du cache: ${file.filename}`);
      }

      // Mettre √† jour le registre
      await localforage.setItem(AUDIO_REGISTRY_KEY, registry);
    }
  },

  /**
   * T√©l√©charge un fichier audio depuis l'URL sign√©e et le met en cache
   */
  async downloadAndCacheAudio(
    callId: number,
    filepath: string,
    signedUrl: string
  ): Promise<string | null> {
    try {
      // Extraire le nom du fichier du chemin
      const filename = filepath.split("/").pop() || `audio_${callId}.mp3`;

      // V√©rifier si l'audio est d√©j√† en cache
      if (await this.isAudioCached(callId)) {
        console.log(`üîÑ Audio d√©j√† en cache: ${filename}`);
        return await this.getAudio(callId);
      }

      console.log(`‚¨áÔ∏è T√©l√©chargement de l'audio: ${filename}`);

      // T√©l√©charger le fichier audio
      const response = await fetch(signedUrl);

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      // Convertir la r√©ponse en blob
      const audioBlob = await response.blob();

      // Mettre en cache
      const success = await this.cacheAudio(
        callId,
        filepath,
        filename,
        audioBlob
      );

      if (success) {
        return URL.createObjectURL(audioBlob);
      }

      return signedUrl; // Fallback sur l'URL sign√©e si la mise en cache √©choue
    } catch (error) {
      console.error(
        "‚ùå Erreur lors du t√©l√©chargement/mise en cache audio:",
        error
      );
      return signedUrl; // Fallback sur l'URL sign√©e
    }
  },

  /**
   * Nettoie le cache audio
   */
  async clearCache(): Promise<void> {
    try {
      console.log("üßπ Nettoyage du cache audio...");
      await audioCache.clear();
      await localforage.removeItem(AUDIO_REGISTRY_KEY);
      console.log("‚úÖ Cache audio nettoy√©");
    } catch (error) {
      console.error("‚ùå Erreur lors du nettoyage du cache audio:", error);
    }
  },
};

export default AudioCacheService;
